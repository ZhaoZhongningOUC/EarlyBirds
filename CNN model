# the code of CNN model, training and predicting process
# input of this code is the trainset.h5
# output of this code is prediction_model.h5
# Author : Feng Hong, <hongfeng@ouc.edu.cn>, Ocean University of China
# Author : Zhongning Zhao, <zhaozhongning1995@foxmail.com>, Ocean University of China


from __future__ import print_function
from keras.models import Sequential
from keras.layers import Activation
import numpy as np
import h5py
from keras.layers.convolutional import Convolution2D
from keras.optimizers import Adam
import os
from keras import backend as K

Grid = 24
lr = 0.0002
batch_size = 1
epochs = 30000


# define the loss function RMSE
def root_mean_squared_error(y_true, y_pred):
    return K.sqrt(K.mean(K.square(y_pred - y_true)))



Model_path = "The trainset and testset path"
os.chdir(Model_path)
train_dataset = h5py.File('trainset.h5', "r")
train_set_x_orig = np.array(train_dataset["train_set_x"][:])  # your train set features
train_set_y_orig = np.array(train_dataset["train_set_y"][:])  # your train set labels
model = Sequential()
model.add(Convolution2D(64, 3, input_shape=(Grid, Grid, 7), padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, padding='same'))
model.add(Activation('relu'))
model.add(Convolution2D(1, 3, padding='same'))
model.add(Activation('relu'))
adam = Adam(lr=lr)
model.compile(loss=root_mean_squared_error, optimizer=adam)
model.summary()
history = model.fit(train_set_x_orig, train_set_y_orig,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_split=0,
                    callbacks=[],
                    )
os.chdir(Model_path)
model.save('my_model.h5')






